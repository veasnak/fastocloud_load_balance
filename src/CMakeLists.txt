# projects globals names
# service variables
SET(MAIN_PROJECT_NAME "fastocloud")
SET(STREAMER_SERVICE_NAME ${PROJECT_NAME_LOWERCASE})
SET(STREAMER_SERVICE_PORT 5317)
SET(STREAMER_SERVICE_HOST "localhost:${STREAMER_SERVICE_PORT}")
SET(STREAMER_SERVICE_SUBSCRIBERS_PORT 6000)
SET(STREAMER_SERVICE_SUBSCRIBERS_HOST "localhost:${STREAMER_SERVICE_SUBSCRIBERS_PORT}")
SET(STREAMER_SERVICE_HTTP_PORT 5001)
SET(STREAMER_SERVICE_HTTP_HOST "localhost:${STREAMER_SERVICE_HTTP_PORT}")
SET(STREAMER_SERVICE_MONGODB_URL "mongodb://localhost:27017")
SET(STREAMER_SERVICE_EPG_URL "https://fastotv.com/epg")
SET(STREAMER_SERVICE_CATCHUPS_PORT 8000)
SET(STREAMER_SERVICE_CATCHUPS_HOST "localhost:${STREAMER_SERVICE_CATCHUPS_PORT}")
SET(STREAMER_SERVICE_CATCHUPS_HTTP_ROOT "~/streamer/hls")
SET(STREAMER_SERVICE_NAME_EXE ${STREAMER_SERVICE_NAME}_s)

FIND_PACKAGE(PkgConfig REQUIRED)
FIND_PACKAGE(Common REQUIRED)
FIND_PACKAGE(FastoTvProtocol REQUIRED)
FIND_PACKAGE(JSON-C REQUIRED)
PKG_CHECK_MODULES(MONGOC REQUIRED libmongoc-1.0)

# platform specific
IF(OS_WINDOWS)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES ws2_32 psapi)
  SET(RELATIVE_SOURCE_DIR .)
ELSEIF(OS_LINUX)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES dl)
  SET(RELATIVE_SOURCE_DIR ..)

  FIND_LIBRARY(UDEV_LIBRARY udev)
  FIND_PATH(UDEV_INCLUDE_DIR NAMES libudev.h)
  IF(UDEV_LIBRARY AND UDEV_INCLUDE_DIR)
    SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} ${UDEV_LIBRARY})
  ENDIF(UDEV_LIBRARY AND UDEV_INCLUDE_DIR)
  FIND_LIBRARY(ATOMIC_LIBRARY NAMES atomic atomic.so.1 libatomic.so.1)
  IF(ATOMIC_LIBRARY)
    SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} ${ATOMIC_LIBRARY})
  ENDIF(ATOMIC_LIBRARY)
ELSEIF(OS_MACOSX)
  FIND_LIBRARY(FOUNDATION_LIBRARY Foundation)
  FIND_LIBRARY(IOKIT_LIBRARY IOKit)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES dl ${FOUNDATION_LIBRARY} ${IOKIT_LIBRARY})
  SET(RELATIVE_SOURCE_DIR ..)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES dl)
  SET(RELATIVE_SOURCE_DIR ..)

  FIND_LIBRARY(UDEV_LIBRARY udev)
  FIND_PATH(UDEV_INCLUDE_DIR NAMES libudev.h)
  IF(UDEV_LIBRARY AND UDEV_INCLUDE_DIR)
    SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} ${UDEV_LIBRARY})
  ENDIF(UDEV_LIBRARY AND UDEV_INCLUDE_DIR)
ELSEIF(OS_POSIX)
  SET(PLATFORM_HEADER)
  SET(PLATFORM_SOURCES)
  SET(PLATFORM_LIBRARIES udev dl)
  SET(RELATIVE_SOURCE_DIR ..)
ENDIF(OS_WINDOWS)

IF(USE_PTHREAD)
  IF(NOT OS_ANDROID)
   SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} pthread)
  ENDIF(NOT OS_ANDROID)
ENDIF(USE_PTHREAD)

SET(SERVER_MONGO_HEADERS
  ${CMAKE_SOURCE_DIR}/src/mongo/subscribers_manager.h
  ${CMAKE_SOURCE_DIR}/src/mongo/mongo_engine.h
  ${CMAKE_SOURCE_DIR}/src/mongo/mongo2info.h
)

SET(SERVER_MONGO_SOURCES
  ${CMAKE_SOURCE_DIR}/src/mongo/subscribers_manager.cpp
  ${CMAKE_SOURCE_DIR}/src/mongo/mongo_engine.cpp
  ${CMAKE_SOURCE_DIR}/src/mongo/mongo2info.cpp
)

SET(SERVER_HTTP_HEADERS
  ${CMAKE_SOURCE_DIR}/src/http/handler.h
  ${CMAKE_SOURCE_DIR}/src/http/client.h
  ${CMAKE_SOURCE_DIR}/src/http/server.h
)

SET(SERVER_HTTP_SOURCES
  ${CMAKE_SOURCE_DIR}/src/http/handler.cpp
  ${CMAKE_SOURCE_DIR}/src/http/client.cpp
  ${CMAKE_SOURCE_DIR}/src/http/server.cpp
)

SET(SERVER_SUBSCRIBERS_HEADERS
  ${CMAKE_SOURCE_DIR}/src/subscribers/handler.h
  ${CMAKE_SOURCE_DIR}/src/subscribers/handler_observer.h
  ${CMAKE_SOURCE_DIR}/src/subscribers/client.h
  ${CMAKE_SOURCE_DIR}/src/subscribers/server.h
)

SET(SERVER_SUBSCRIBERS_SOURCES
  ${CMAKE_SOURCE_DIR}/src/subscribers/handler.cpp
  ${CMAKE_SOURCE_DIR}/src/subscribers/handler_observer.cpp
  ${CMAKE_SOURCE_DIR}/src/subscribers/client.cpp
  ${CMAKE_SOURCE_DIR}/src/subscribers/server.cpp
)

SET(SERVER_DAEMON_HEADERS
  ${CMAKE_SOURCE_DIR}/src/daemon/client.h
  ${CMAKE_SOURCE_DIR}/src/daemon/server.h
  ${CMAKE_SOURCE_DIR}/src/daemon/commands.h
  ${CMAKE_SOURCE_DIR}/src/daemon/commands_factory.h
)

SET(SERVER_DAEMON_SOURCES
  ${CMAKE_SOURCE_DIR}/src/daemon/client.cpp
  ${CMAKE_SOURCE_DIR}/src/daemon/server.cpp
  ${CMAKE_SOURCE_DIR}/src/daemon/commands.cpp
  ${CMAKE_SOURCE_DIR}/src/daemon/commands_factory.cpp
)

SET(SERVER_HEADERS
  ${CMAKE_SOURCE_DIR}/src/base/iserver_handler.h
  ${CMAKE_SOURCE_DIR}/src/base/server_auth_info.h
  ${CMAKE_SOURCE_DIR}/src/base/subscriber_info.h
  ${CMAKE_SOURCE_DIR}/src/base/isubscribers_manager.h

  ${CMAKE_SOURCE_DIR}/src/process_slave_wrapper.h
  ${CMAKE_SOURCE_DIR}/src/config.h

  ${SERVER_MONGO_HEADERS}
  ${SERVER_HTTP_HEADERS}
  ${SERVER_SUBSCRIBERS_HEADERS}
  ${SERVER_DAEMON_HEADERS}
)
SET(SERVER_SOURCES
  ${CMAKE_SOURCE_DIR}/src/base/iserver_handler.cpp
  ${CMAKE_SOURCE_DIR}/src/base/server_auth_info.cpp
  ${CMAKE_SOURCE_DIR}/src/base/subscriber_info.cpp
  ${CMAKE_SOURCE_DIR}/src/base/isubscribers_manager.cpp

  ${CMAKE_SOURCE_DIR}/src/process_slave_wrapper.cpp
  ${CMAKE_SOURCE_DIR}/src/config.cpp

  ${SERVER_MONGO_SOURCES}
  ${SERVER_HTTP_SOURCES}
  ${SERVER_SUBSCRIBERS_SOURCES}
  ${SERVER_DAEMON_SOURCES}
)

SET(DAEMON_SOURCES ${SERVER_HEADERS} ${SERVER_SOURCES})
SET(DAEMON_LIBRARIES ${DAEMON_LIBRARIES}
  ${FASTOTV_PROTOCOL_LIBRARIES}
  ${COMMON_LIBRARIES}
  ${JSONC_LIBRARIES}
  ${MONGOC_LIBRARIES}
  ${PLATFORM_LIBRARIES}
  ${ZLIB_LIBRARIES}
)
SET(PRIVATE_INCLUDE_DIRECTORIES_SLAVE ${PRIVATE_INCLUDE_DIRECTORIES_SLAVE}
  ${FASTOTV_PROTOCOL_INCLUDE_DIRS}
  ${COMMON_INCLUDE_DIRS}
  ${CMAKE_SOURCE_DIR}/src
  ${MONGOC_INCLUDE_DIRS}
)
SET(RUN_DIR_PATH "/var/run/${STREAMER_SERVICE_NAME}")
SET(PIDFILE_PATH "${RUN_DIR_PATH}/${STREAMER_SERVICE_NAME}.pid")
SET(USER_NAME ${MAIN_PROJECT_NAME})
SET(USER_GROUP ${MAIN_PROJECT_NAME})
SET(CONFIG_PATH "/etc/${STREAMER_SERVICE_NAME}.conf")

SET(PRIVATE_COMPILE_DEFINITIONS_SLAVE ${PRIVATE_COMPILE_DEFINITIONS_SLAVE}
  -DRELATIVE_SOURCE_DIR="${RELATIVE_SOURCE_DIR}"
  -DUSER_NAME="${USER_NAME}"
  -DUSER_GROUP="${USER_GROUP}"
  -DCONFIG_PATH="${CONFIG_PATH}"
  -DPIDFILE_PATH="${PIDFILE_PATH}"
  -DPIDFILE_PATH="${PIDFILE_PATH}"
  -DSTREAMER_SERVICE_NAME="${STREAMER_SERVICE_NAME}"
  -DSUBSCRIBERS_PORT=${STREAMER_SERVICE_SUBSCRIBERS_PORT}
  -DHTTP_PORT=${STREAMER_SERVICE_HTTP_PORT}
  -DMONGODB_URL="${STREAMER_SERVICE_MONGODB_URL}"
  -DEPG_URL="${STREAMER_SERVICE_EPG_URL}"
  -DSERVICE_HOST="${STREAMER_SERVICE_HOST}"
  -DCATCHUPS_HOST="${STREAMER_SERVICE_CATCHUPS_HOST}"
  -DCATCHUPS_HTTP_ROOT="${STREAMER_SERVICE_CATCHUPS_HTTP_ROOT}"
)

SET(EXE_DAEMON_SOURCES ${CMAKE_SOURCE_DIR}/src/daemon_slave.cpp)

ADD_EXECUTABLE(${STREAMER_SERVICE_NAME_EXE} ${DAEMON_SOURCES} ${EXE_DAEMON_SOURCES})
TARGET_INCLUDE_DIRECTORIES(${STREAMER_SERVICE_NAME_EXE} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_SLAVE})
TARGET_COMPILE_DEFINITIONS(${STREAMER_SERVICE_NAME_EXE} PRIVATE ${PRIVATE_COMPILE_DEFINITIONS_SLAVE})
TARGET_LINK_LIBRARIES(${STREAMER_SERVICE_NAME_EXE} ${DAEMON_LIBRARIES})

IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
  STRIP_TARGET(${STREAMER_SERVICE_NAME_EXE})
ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
INSTALL(TARGETS ${STREAMER_SERVICE_NAME_EXE} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)

INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE DESTINATION . COMPONENT LICENSE RENAME LICENSE OPTIONAL)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/COPYRIGHT DESTINATION . COMPONENT LICENSE RENAME COPYRIGHT OPTIONAL)
INSTALL(FILES ${PROJECT_CHANGELOG_FILE} DESTINATION . COMPONENT LICENSE RENAME CHANGELOG OPTIONAL)

SET(EXECUTABLE_FOLDER_PATH ${CMAKE_INSTALL_PREFIX}/bin)

IF(OS_WINDOWS)
ELSEIF(OS_MACOSX)
ELSEIF(OS_LINUX OR OS_FREEBSD)
  SET(EXECUTABLE_PATH ${EXECUTABLE_FOLDER_PATH}/${STREAMER_SERVICE_NAME} CACHE INTERNAL "Daemon path: ${EXECUTABLE_PATH}")
ENDIF(OS_WINDOWS)

# script
SET(SERVICE_START_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${STREAMER_SERVICE_NAME})
GEN_START_SCRIPT(${SERVICE_START_SCRIPT_GEN_PATH} ${STREAMER_SERVICE_NAME_EXE})
INSTALL(PROGRAMS ${SERVICE_START_SCRIPT_GEN_PATH} DESTINATION
  ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS
)

# service
IF(OS_LINUX OR OS_FREEBSD)
  SET(SERVICE_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${STREAMER_SERVICE_NAME}.service)
  GEN_SERVICE_SERVICE_FILE(${SERVICE_SCRIPT_GEN_PATH}
    ${STREAMER_SERVICE_NAME} ${STREAMER_SERVICE_NAME_EXE}
    ${EXECUTABLE_PATH}
    ${RUN_DIR_PATH}
    ${PIDFILE_PATH}
    ${USER_NAME} ${USER_GROUP}
    ${PROJECT_SUMMARY}
  )
  INSTALL(FILES ${SERVICE_SCRIPT_GEN_PATH} DESTINATION /etc/systemd/system/)

  SET(SERVICE_DEB_SCRIPT_GEN_PATH ${CMAKE_BINARY_DIR}/service/${STREAMER_SERVICE_NAME}.debian)
  GEN_DEBIAN_SERVICE_FILE(${SERVICE_DEB_SCRIPT_GEN_PATH}
    ${STREAMER_SERVICE_NAME} ${STREAMER_SERVICE_NAME_EXE}
    ${EXECUTABLE_PATH}
    ${RUN_DIR_PATH}
    ${PIDFILE_PATH}
    ${USER_NAME} ${USER_GROUP}
    ${PROJECT_SUMMARY}
  )
  INSTALL(FILES ${SERVICE_DEB_SCRIPT_GEN_PATH}
    DESTINATION /etc/init.d
    RENAME ${STREAMER_SERVICE_NAME}
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
ENDIF(OS_LINUX OR OS_FREEBSD)

# config file
SET(SERVICE_CONF_GEN_PATH ${CMAKE_BINARY_DIR}/service/${STREAMER_SERVICE_NAME}.conf)
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/service/service.conf.in
  ${SERVICE_CONF_GEN_PATH} @ONLY IMMEDIATE
)
IF(NOT EXISTS ${CONFIG_PATH})
  INSTALL(FILES ${SERVICE_CONF_GEN_PATH} DESTINATION /etc/)
ENDIF(NOT EXISTS ${CONFIG_PATH})

IF (DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES_DAEMON ${DAEMON_SOURCES} ${EXE_DAEMON_SOURCES})
  REGISTER_CHECK_STYLE_TARGET(check_style_${STREAMER_SERVICE_NAME} "${CHECK_SOURCES_DAEMON}")
  REGISTER_CHECK_INCLUDES_TARGET(${STREAMER_SERVICE_NAME_EXE})
ENDIF(DEVELOPER_CHECK_STYLE)

IF(DEVELOPER_ENABLE_TESTS)
  FIND_PACKAGE(GTest REQUIRED)

  ## Unit tests
  SET(UNIT_TESTS_DEFINITIONS -DPROJECT_TEST_SOURCES_DIR="${CMAKE_SOURCE_DIR}/tests")
  SET(PRIVATE_INCLUDE_DIRECTORIES_UNIT_TESTS ${PRIVATE_INCLUDE_DIRECTORIES_UNIT_TESTS} ${CMAKE_SOURCE_DIR}/src)
  SET(UNIT_TESTS_LIBS ${GTEST_BOTH_LIBRARIES} ${PLATFORM_LIBRARIES})
  SET(UNIT_TESTS unit_tests_server)
  ADD_EXECUTABLE(${UNIT_TESTS} ${CMAKE_SOURCE_DIR}/tests/unit_test_server.cpp)
  TARGET_INCLUDE_DIRECTORIES(${UNIT_TESTS} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_UNIT_TESTS} ${JSONC_INCLUDE_DIRS})
  TARGET_COMPILE_DEFINITIONS(${UNIT_TESTS} PRIVATE ${UNIT_TESTS_DEFINITIONS})
  TARGET_LINK_LIBRARIES(${UNIT_TESTS} ${UNIT_TESTS_LIBS} ${DAEMON_LIBRARIES})
  ADD_TEST_TARGET(${UNIT_TESTS})
  SET_PROPERTY(TARGET ${UNIT_TESTS} PROPERTY FOLDER "Unit tests")
ENDIF(DEVELOPER_ENABLE_TESTS)
